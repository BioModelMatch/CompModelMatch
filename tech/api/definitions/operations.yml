swagger: '2.0'
info:
  version: '0.1'
  title: 'JSON API to FAIRDOM SEEK'
  license:
    name: 'The 3-Clause BSD License'
    url: 'https://opensource.org/licenses/BSD-3-Clause'
  contact:
    name: SEEK support
    url: http://groups.google.com/group/seek4science
    email: support@fair-dom.org
  description:
    $ref: ../descriptions/api.md
  x-logo:
    url: './definitions/seek.png'
    backgroundColor: '#FFFFFF'
host: www.fairdomhub.org
basePath: /
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  basicAuth:
    type: basic
    description:
      $ref: ../descriptions/authentication.md
security:
  - basicAuth: []
tags:
  - name: list
    description:
      $ref: ../descriptions/list.md
    x-traitTag: true
  - name: create
    description:
      $ref: ../descriptions/create.md
    x-traitTag: true
  - name: read
    description:
      $ref: ../descriptions/read.md
    x-traitTag: true
  - name: update
    description:
      $ref: ../descriptions/update.md
    x-traitTag: true
  - name: delete
    description:
      $ref: ../descriptions/delete.md
    x-traitTag: true
  - name: upload
    description:
      $ref: ../descriptions/upload.md
    x-traitTag: true
  - name: download
    description:
      $ref: ../descriptions/download.md
    x-traitTag: true

  - name: search
    description:
      $ref: ../descriptions/search.md
  - name: institutions
    description:
      $ref: ../descriptions/institutions.md
  - name: people
    description:
      $ref: ../descriptions/people.md
  - name: programmes
    description:
      $ref: ../descriptions/programmes.md
  - name: projects
    description:
      $ref: ../descriptions/projects.md
  
  - name: investigations
    description:
      $ref: ../descriptions/investigations.md
  - name: studies
    description:
      $ref: ../descriptions/studies.md
  - name: assays
    description:
      $ref: ../descriptions/assays.md
  
  - name: contentBlobs
    description:
      $ref: ../descriptions/contentBlobs.md

  - name: dataFiles
    description:
      $ref: ../descriptions/dataFiles.md
  - name: documents
    description:
      $ref: ../descriptions/documents.md
  - name: models
    description:
      $ref: ../descriptions/models.md
  - name: publications
    description:
      $ref: ../descriptions/publications.md
  - name: sops
    description:
      $ref: ../descriptions/sops.md

  - name: events
    description:
      $ref: ../descriptions/events.md
  - name: presentations
    description:
      $ref: ../descriptions/presentations.md

  - name: organisms
    description:
      $ref: ../descriptions/organisms.md
  - name: sampleTypes
    description:
      $ref: ../descriptions/sampleTypes.md
  
x-tagGroups:
  - name: operation types
    tags:
      - list
      - create
      - read
      - update
      - delete
      - upload
      - download

  - name: Search
    tags:
      - search

  - name: Yellow Pages
    tags:
      - institutions
      - people
      - programmes
      - projects

  - name: Experiments
    tags:
      - investigations
      - studies
      - assays

  - name: Assets
    tags:
      - dataFiles
      - documents
      - models
      - publications
      - sops
      - contentBlobs

  - name: Activities
    tags:
      - events
      - presentations
      
  - name: Samples
    tags:
      - organisms
      - sampleTypes
      
x-types:
  ListTypeT: &ListType
    '501':
      description: Not implemented

  CreateTypeT: &CreateType
    '400':
      description: Bad request
      schema:
        $ref: '#/definitions/bad_request'
    '403':
      description: Forbidden
      schema:
        $ref: '#/definitions/forbidden'
    '422':
      description: Unprocessable entity
      schema:
        $ref: '#/definitions/unprocessable_entity'
    
  ReadTypeT: &ReadType
    '403':
      description: Forbidden
      schema:
        $ref: '#/definitions/forbidden'
    '404':
      description: Not found
      schema:
        $ref: '#/definitions/not_found'

  UpdateTypeT: &UpdateType
    '403':
      description: Forbidden
      schema:
        $ref: '#/definitions/forbidden'
    '404':
      description: Not found
      schema:
        $ref: '#/definitions/not_found'
    '422':
      description: Unprocessable entity
      schema:
       $ref: '#/definitions/unprocessable_entity'

  DeleteTypeT: &DeleteType
    '403':
      description: Forbidden
      schema:
        $ref: '#/definitions/forbidden'
    '404':
      description: Not found
      schema:
        $ref: '#/definitions/not_found'

paths:
  /search:
    parameters:
      - name: q
        in: query
        required: true
        description: |
          The text to search for
        type: string
        default: lactate inhibition
      - name: search_type
        in: query
        required: false
        description: The type of resource to return
        type: string
        enum:
          - assays
          - data_files
          - events
          - institutions
          - investigations
          - models
          - people
          - presentations
          - programmes
          - projects
          - publications
          - sample_types
          - sops
          - studies
        default: data_files
    get:
      operationId: search
      description:
        $ref: ../descriptions/searchOperation.md
      tags:
        - search
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/searchResponse'
          examples:
            application/json:
              $ref: ../examples/searchResponse.yml
  /assays:
    get:
      operationId: listAssays
      description:
        $ref: ../descriptions/listAssays.md
      tags:
        - list
        - assays
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/assaysResponse'
          examples:
            application/json:
              $ref: ../examples/assaysResponse.yml
        <<: *ListType
    post:
      operationId: createAssay
      description:
        $ref: ../descriptions/createAssay.md
      tags:
        - create
        - assays
      parameters:
        - in: body
          name: assay
          description: The assay to create.
          schema:
            $ref: '#/definitions/assayPost'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/assayResponse'
          examples:
            application/json:
              $ref: ../examples/assayPostResponse.yml
        <<: *CreateType
  '/assays/{id}':
    parameters:
      - name: id
        in: path
        required: true
        description: 'The assay to be fetched, updated or deleted'
        type: integer
        default: 267
    patch:
      operationId: updateAssay
      description:
        $ref: ../descriptions/updateAssay.md
      tags:
        - update
        - assays
      parameters:
        - in: body
          name: assay
          description: The assay to patch
          schema:
            $ref: '#/definitions/assayPatch'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/assayResponse'
          examples:
            application/json:
              $ref: ../examples/assayPatchResponse.yml
        <<: *UpdateType
    get:
      operationId: readAssay
      description:
        $ref: ../descriptions/readAssay.md
      tags:
        - read
        - assays
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/assayResponse'
          examples:
            application/json:
              $ref: ../examples/assayResponse.yml
        <<: *ReadType
    delete:
      operationId: deleteAssay
      description:
        $ref: ../descriptions/deleteAssay.md
      tags:
        - delete
        - assays
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ok'
        <<: *DeleteType
  /data_files:
    get:
      operationId: listDataFiles
      description:
        $ref: ../descriptions/listDataFiles.md
      tags:
        - list
        - dataFiles
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/dataFilesResponse'
          examples:
            application/json:
              $ref: ../examples/dataFilesResponse.yml
        <<: *ListType
    post:
      operationId: createDataFile
      description:
        $ref: ../descriptions/createDataFile.md
      tags:
        - create
        - dataFiles
      parameters:
        - in: body
          name: dataFile
          description: The dataFile to create.
          schema:
            $ref: '#/definitions/dataFilePost'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/dataFileResponse'
          examples:
            application/json:
              $ref: ../examples/dataFilePostResponse.yml
        <<: *CreateType
  '/data_files/{id}':
    parameters:
      - name: id
        in: path
        required: true
        description: The data file to fetch
        type: integer
        default: 1152
    get:
      operationId: readDataFile
      description:
        $ref: ../descriptions/readDataFile.md
      parameters:
        - name: version
          in: query
          required: true
          description: The version of the data file to get
          type: integer
          default: 2
      tags:
        - read
        - dataFiles
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/dataFileResponse'
          examples:
            application/json:
              $ref: ../examples/dataFileResponse.yml
        <<: *ReadType
    patch:
      operationId: updateDataFile
      description:
        $ref: ../descriptions/updateDataFile.md
      tags:
        - update
        - dataFiles
      parameters:
        - in: body
          name: data file
          description: The data file to patch
          schema:
            $ref: '#/definitions/dataFilePatch'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/dataFileResponse'
          examples:
            application/json:
              $ref: ../examples/dataFilePatchResponse.yml
        <<: *UpdateType
    delete:
      operationId: deleteDataFile
      description:
        $ref: ../descriptions/deleteDataFile.md
      tags:
        - delete
        - dataFiles
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ok'
        <<: *DeleteType
  '/{asset_types}/{id}/content_blobs/{blob_id}':
    parameters:
      - name: asset_types
        in: path
        required: true
        description: The typs of asset being fetched, uploaded or downloaded
        type: string
        default: data_files
      - name: id
        in: path
        required: true
        description: The asset content to fetch, upload or download
        type: integer
        default: 1152
      - name: blob_id
        in: path
        required: true
        description: The asset identifier to fetch, upload or download
        type: integer
        default: 1831
    put:
      operationId: uploadAssetContent
      description:
        $ref: ../descriptions/uploadAssetContent.md
      consumes:
        - application/octet-stream
      produces:
        - '*/*'
      tags:
        - upload
        - contentBlobs
      parameters:
        - in: body
          name: blobContent
          description: The blob content to fetch, upload or download
          schema:
            type: string
            format: binary
      responses:
        '200':
          description: Success
    get:
      operationId: readContentBlob
      description:
        $ref: ../descriptions/readContentBlob.md
      produces:
        - application/json
        - text/csv
      tags:
        - read
        - contentBlobs
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/contentBlobResponse'
        <<: *ReadType
  '/{asset_types}/{id}/content_blobs/{blob_id}/download':
    parameters:
      - name: asset_types
        in: path
        required: true
        description: The typs of asset being downloaded
        type: string
        default: data_files
      - name: id
        in: path
        required: true
        description: The asset to fetch
        type: integer
        default: 1152
      - name: blob_id
        in: path
        required: true
        description: The blob to download
        type: integer
        default: 1831
    get:
      operationId: downloadAssetContent
      description:
        $ref: ../descriptions/downloadAssetContent.md
      produces:
        - '*/*'
      tags:
        - download
        - contentBlobs
      responses:
        '200':
          description: Success
        <<: *ReadType
  /documents:
    get:
      operationId: listDocuments
      description:
        $ref: ../descriptions/listDocuments.md
      tags:
        - list
        - documents
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/documentsResponse'
          examples:
            application/json:
              $ref: ../examples/documentsResponse.yml
        <<: *ListType
    post:
      operationId: createDocument
      description:
        $ref: ../descriptions/createDocument.md
      tags:
        - create
        - documents
      parameters:
        - in: body
          name: document
          description: The document to create.
          schema:
            $ref: '#/definitions/documentPost'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/documentResponse'
          examples:
            application/json:
              $ref: ../examples/documentPostResponse.yml
        <<: *CreateType
  '/documents/{id}':
    parameters:
      - name: id
        in: path
        required: true
        description: The document to fetch
        type: integer
        default: 1152
    get:
      operationId: readDocument
      description:
        $ref: ../descriptions/readDocument.md
      tags:
        - read
        - documents
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/documentResponse'
          examples:
            application/json:
              $ref: ../examples/documentResponse.yml
        <<: *ReadType
    patch:
      operationId: updateDocument
      description:
        $ref: ../descriptions/updateDocument.md
      tags:
        - update
        - documents
      parameters:
        - in: body
          name: document
          description: The document to patch.
          schema:
            $ref: '#/definitions/documentPatch'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/documentResponse'
          examples:
            application/json:
              $ref: ../examples/documentPatchResponse.yml
        <<: *UpdateType
    delete:
      operationId: deleteDocument
      description:
        $ref: ../descriptions/deleteDocument.md
      tags:
        - delete
        - documents
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ok'
        <<: *DeleteType
  /events:
    get:
      operationId: listEvents
      description:
        $ref: ../descriptions/listEvents.md
      tags:
        - list
        - events
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/eventsResponse'
          examples:
            application/json:
              $ref: ../examples/eventsResponse.yml
        <<: *ListType
    post:
      operationId: createEvent
      description:
        $ref: ../descriptions/createEvent.md
      tags:
        - create
        - events
      parameters:
        - in: body
          name: sop
          description: The event to create.
          schema:
            $ref: '#/definitions/eventPost'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/eventResponse'
          examples:
            application/json:
              $ref: ../examples/eventPostResponse.yml
        <<: *CreateType
  '/events/{id}':
    parameters:
      - name: id
        in: path
        required: true
        description: The event to fetch
        type: integer
        default: 75
    get:
      operationId: readEvent
      description:
        $ref: ../descriptions/readEvent.md
      tags:
        - read
        - events
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/eventResponse'
          examples:
            application/json:
              $ref: ../examples/eventResponse.yml
        <<: *ReadType
    patch:
      operationId: updateEvent
      description:
        $ref: ../descriptions/updateEvent.md
      tags:
        - update
        - events
      parameters:
        - in: body
          name: sop
          description: The event to update.
          schema:
            $ref: '#/definitions/eventPatch'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/eventResponse'
          examples:
            application/json:
              $ref: ../examples/eventPatchResponse.yml
        <<: *UpdateType
    delete:
      operationId: deleteEvent
      description:
        $ref: ../descriptions/deleteEvent.md
      tags:
        - delete
        - events
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ok'
        <<: *DeleteType
  /institutions:
    get:
      operationId: listInstitutions
      description:
        $ref: ../descriptions/listInstitutions.md
      tags:
        - list
        - institutions
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/institutionsResponse'
          examples:
            application/json:
              $ref: ../examples/institutionsResponse.yml
        <<: *ListType
    post:
      operationId: createInstitution
      description:
        $ref: ../descriptions/createInstitution.md
      tags:
        - create
        - institutions
      parameters:
        - in: body
          name: institution
          description: The institution to create.
          schema:
            $ref: '#/definitions/institutionPost'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/institutionResponse'
          examples:
            application/json:
              $ref: ../examples/institutionPostResponse.yml
        <<: *CreateType
  '/institutions/{id}':
    parameters:
      - name: id
        in: path
        required: true
        description: 'The institution to fetch, patch or delete'
        type: integer
        default: 142
    get:
      operationId: readInstitution
      description:
        $ref: ../descriptions/readInstitution.md
      tags:
        - read
        - institutions
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/institutionResponse'
          examples:
            application/json:
              $ref: ../examples/institutionResponse.yml
        <<: *ReadType
    patch:
      operationId: updateInstitution
      description:
        $ref: ../descriptions/updateInstitution.md
      parameters:
        - in: body
          name: institution
          description: The data with which to update the institution.
          schema:
            $ref: '#/definitions/institutionPatch'
      tags:
        - update
        - institutions
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/institutionResponse'
          examples:
            application/json:
              $ref: ../examples/institutionPatchResponse.yml
        <<: *UpdateType
    delete:
      operationId: deleteInstitution
      description:
        $ref: ../descriptions/deleteInstitution.md
      tags:
        - delete
        - institutions
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ok'
        <<: *DeleteType

  /investigations:
    get:
      operationId: listInvestigations
      description:
        $ref: ../descriptions/listInvestigations.md
      tags:
        - list
        - investigations
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/investigationsResponse'
          examples:
            application/json:
              $ref: ../examples/investigationsResponse.yml
        <<: *ListType
    post:
      operationId: createInvestigation
      description:
        $ref: ../descriptions/createInvestigation.md
      tags:
        - create
        - investigations
      parameters:
        - in: body
          name: investigation
          description: The investigation to create.
          schema:
            $ref: '#/definitions/investigationPost'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/investigationResponse'
          examples:
            application/json:
              $ref: ../examples/investigationPostResponse.yml
        <<: *CreateType
  '/investigations/{id}':
    parameters:
      - name: id
        in: path
        required: true
        description: 'The investigation to fetch, patch or delete'
        type: integer
        default: 56
    get:
      operationId: readInvestigation
      description:
        $ref: ../descriptions/readInvestigation.md
      tags:
        - read
        - investigations
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/investigationResponse'
          examples:
            application/json:
              $ref: ../examples/investigationResponse.yml
        <<: *ReadType
    patch:
      operationId: updateInvestigation
      description:
        $ref: ../descriptions/updateInvestigation.md
      parameters:
        - in: body
          name: investigation
          description: The investigation to patch.
          schema:
            $ref: '#/definitions/investigationPatch'
      tags:
        - update
        - investigations
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/investigationResponse'
          examples:
            application/json:
              $ref: ../examples/investigationPatchResponse.yml
        <<: *UpdateType
    delete:
      operationId: deleteInvestigation
      description:
        $ref: ../descriptions/deleteInvestigation.md
      tags:
        - delete
        - investigations
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ok'
        <<: *DeleteType
  /models:
    get:
      operationId: listModels
      description:
        $ref: ../descriptions/listModels.md
      tags:
        - list
        - models
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/modelsResponse'
          examples:
            application/json:
              $ref: ../examples/modelsResponse.yml
        <<: *ListType
    post:
      operationId: createModel
      description:
        $ref: ../descriptions/createModel.md
      tags:
        - create
        - models
      parameters:
        - in: body
          name: model
          description: The model to create.
          schema:
            $ref: '#/definitions/modelPost'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/modelResponse'
          examples:
            application/json:
              $ref: ../examples/modelPostResponse.yml
        <<: *CreateType
  '/models/{id}':
    parameters:
      - name: id
        in: path
        required: true
        description: 'The model to fetch, patch or delete'
        type: integer
        default: 139
    get:
      operationId: readModel
      description:
        $ref: ../descriptions/readModel.md
      parameters:
        - name: version
          in: query
          required: true
          description: The version of the model to get
          type: integer
          default: 2
      tags:
        - read
        - models
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/modelResponse'
          examples:
            application/json:
              $ref: ../examples/modelResponse.yml
        <<: *ReadType
    patch:
      operationId: updateModel
      description:
        $ref: ../descriptions/updateModel.md
      tags:
        - update
        - models
      parameters:
        - in: body
          name: model
          description: The model to patch.
          schema:
            $ref: '#/definitions/modelPatch'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/modelResponse'
          examples:
            application/json:
              $ref: ../examples/modelPatchResponse.yml
        <<: *UpdateType
    delete:
      operationId: deleteModel
      description:
        $ref: ../descriptions/deleteModel.md
      tags:
        - delete
        - models
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ok'
        <<: *DeleteType
  /organisms:
    get:
      operationId: listOrganisms
      description:
        $ref: ../descriptions/listOrganisms.md
      tags:
        - list
        - organisms
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/organismsResponse'
          examples:
            application/json:
              $ref: ../examples/organismsResponse.yml
        <<: *ListType
  '/organisms/{id}':
    parameters:
      - name: id
        in: path
        required: true
        description: 'The organism to fetch, patch or delete'
        type: integer
        default: 1933753696
    get:
      operationId: readOrganism
      description:
        $ref: ../descriptions/readOrganism.md
      tags:
        - read
        - organisms
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/organismResponse'
          examples:
            application/json:
              $ref: ../examples/organismResponse.yml
        <<: *ReadType
  /people:
    get:
      operationId: listPeople
      description:
        $ref: ../descriptions/listPeople.md
      tags:
        - list
        - people
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/peopleResponse'
          examples:
            application/json:
              $ref: ../examples/peopleResponse.yml
        <<: *ListType
    post:
      operationId: createPerson
      description:
        $ref: ../descriptions/createPerson.md
      tags:
        - create
        - people
      parameters:
        - in: body
          name: person
          description: The person to create.
          schema:
            $ref: '#/definitions/personPost'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/personResponse'
          examples:
            application/json:
              $ref: '../examples/personPostResponse.yml'
        <<: *CreateType
  '/people/{id}':
    parameters:
      - name: id
        in: path
        required: true
        description: 'The person to fetch, patch or delete'
        type: integer
        default: 433
    get:
      operationId: readPerson
      description:
        $ref: ../descriptions/readPerson.md
      tags:
        - read
        - people
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/personResponse'
          examples:
            application/json:
              $ref: ../examples/personResponse.yml
        <<: *ReadType
    patch:
      operationId: updatePerson
      description:
        $ref: ../descriptions/updatePerson.md
      parameters:
        - in: body
          name: person
          description: The data with which to update the person.
          schema:
            $ref: '#/definitions/personPatch'
      tags:
        - update
        - people
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/personResponse'
          examples:
            application/json:
              $ref: ../examples/personPatchResponse.yml
        <<: *UpdateType
    delete:
      operationId: deletePerson
      description:
        $ref: ../descriptions/deletePerson.md
      tags:
        - delete
        - people
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ok'
        <<: *DeleteType
  /presentations:
    get:
      operationId: listPresentations
      description:
        $ref: ../descriptions/listPresentations.md
      tags:
        - list
        - presentations
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/presentationsResponse'
          examples:
            application/json:
              $ref: ../examples/presentationsResponse.yml
        <<: *ListType
    post:
      operationId: createPresentation
      description:
        $ref: ../descriptions/createPresentation.md
      tags:
        - create
        - presentations
      parameters:
        - in: body
          name: presentation
          description: The presentation to create.
          schema:
            $ref: '#/definitions/presentationPost'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/presentationResponse'
          examples:
            application/json:
              $ref: '../examples/presentationPostResponse.yml'
        <<: *CreateType
  '/presentations/{id}':
    parameters:
      - name: id
        in: path
        required: true
        description: 'The presentation to fetch, patch or delete'
        type: integer
        default: 253
    get:
      operationId: readPresentation
      description:
        $ref: ../descriptions/readPresentation.md
      parameters:
        - name: version
          in: query
          required: true
          description: The version of the presentation to get
          type: integer
          default: 1
      tags:
        - read
        - presentations
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/presentationResponse'
          examples:
            application/json:
              $ref: ../examples/presentationResponse.yml
        <<: *ReadType
    patch:
      operationId: updatePresentation
      description:
        $ref: ../descriptions/updatePresentation.md
      tags:
        - update
        - presentations
      parameters:
        - in: body
          name: presentation
          description: The presentation to update.
          schema:
            $ref: '#/definitions/presentationPatch'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/presentationResponse'
          examples:
            application/json:
              $ref: ../examples/presentationPatchResponse.yml
        <<: *UpdateType
    delete:
      operationId: deletePresentation
      description:
        $ref: ../descriptions/deletePresentation.md
      tags:
        - delete
        - presentations
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ok'
        <<: *DeleteType
  /programmes:
    get:
      operationId: listProgrammes
      description:
        $ref: ../descriptions/listProgrammes.md
      tags:
        - list
        - programmes
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/programmesResponse'
          examples:
            application/json:
              $ref: ../examples/programmesResponse.yml
        <<: *ListType
    post:
      operationId: createProgramme
      description:
        $ref: ../descriptions/createProgramme.md
      tags:
        - create
        - programmes
      parameters:
        - in: body
          name: programme
          description: The programme to create.
          schema:
            $ref: '#/definitions/programmePost'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/programmeResponse'
          examples:
            application/json:
              $ref: '../examples/programmePostResponse.yml'
        <<: *CreateType
  '/programmes/{id}':
    parameters:
      - name: id
        in: path
        required: true
        description: 'The programme to fetch, patch or delete'
        type: integer
        default: 3
    get:
      operationId: readProgramme
      description:
        $ref: ../descriptions/readProgramme.md
      tags:
        - read
        - programmes
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/programmeResponse'
          examples:
            application/json:
              $ref: ../examples/programmeResponse.yml
        <<: *ReadType
    patch:
      operationId: updateProgramme
      description:
        $ref: ../descriptions/updateProgramme.md
      parameters:
        - in: body
          name: programme
          description: The data with which to update the programme.
          schema:
            $ref: '#/definitions/programmePatch'
      tags:
        - update
        - programmes
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/programmeResponse'
          examples:
            application/json:
              $ref: ../examples/programmePatchResponse.yml
        <<: *UpdateType
    delete:
      operationId: deleteProgramme
      description:
        $ref: ../descriptions/deleteProgramme.md
      tags:
        - delete
        - programmes
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ok'
        <<: *DeleteType
  /projects:
    get:
      operationId: listProjects
      description:
        $ref: ../descriptions/listProjects.md
      tags:
        - list
        - projects
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/projectsResponse'
          examples:
            application/json:
              $ref: ../examples/projectsResponse.yml
        <<: *ListType
    post:
      operationId: createProject
      description:
        $ref: ../descriptions/createProject.md
      tags:
        - create
        - projects
      parameters:
        - in: body
          name: project
          description: The project to create.
          schema:
            $ref: '#/definitions/projectPost'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/projectResponse'
          examples:
            application/json:
              $ref: '../examples/projectPostResponse.yml'
        <<: *CreateType
  '/projects/{id}':
    parameters:
      - name: id
        in: path
        required: true
        description: 'The project to fetch, patch or delete'
        type: integer
        default: 17
    get:
      operationId: readProject
      description:
        $ref: ../descriptions/readProject.md
      tags:
        - read
        - projects
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/projectResponse'
          examples:
            application/json:
              $ref: ../examples/projectResponse.yml
        <<: *ReadType
    patch:
      operationId: updateProject
      description:
        $ref: ../descriptions/updateProject.md
      parameters:
        - in: body
          name: project
          description: The data with which to update the project.
          schema:
            $ref: '#/definitions/projectPatch'
      tags:
        - update
        - projects
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/projectResponse'
          examples:
            application/json:
              $ref: ../examples/projectPatchResponse.yml
        <<: *UpdateType
    delete:
      operationId: deleteProject
      description:
        $ref: ../descriptions/deleteProject.md
      tags:
        - delete
        - projects
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ok'
        <<: *DeleteType
  /publications:
    get:
      operationId: listPublications
      description:
        $ref: ../descriptions/listPublications.md
      tags:
        - list
        - publications
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/publicationsResponse'
          examples:
            application/json:
              $ref: ../examples/publicationsResponse.yml
        <<: *ListType
  '/publications/{id}':
    parameters:
      - name: id
        in: path
        required: true
        description: 'The publication to fetch, patch or delete'
        type: integer
        default: 240
    get:
      operationId: readPublication
      description:
        $ref: ../descriptions/readPublication.md
      tags:
        - read
        - publications
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/publicationResponse'
          examples:
            application/json:
              $ref: ../examples/publicationResponse.yml
        <<: *ReadType
  /sample_types:
    get:
      operationId: listSampleTypes
      description:
        $ref: ../descriptions/listSampleTypes.md
      tags:
        - list
        - sampleTypes
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/sampleTypesResponse'
          examples:
            application/json:
              $ref: ../examples/sampleTypesResponse.yml
        <<: *ListType
  /sops:
    get:
      operationId: listSops
      description:
        $ref: ../descriptions/listSops.md
      tags:
        - list
        - sops
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/sopsResponse'
          examples:
            application/json:
              $ref: ../examples/sopsResponse.yml
        <<: *ListType
    post:
      operationId: createSop
      description:
        $ref: ../descriptions/createSop.md
      tags:
        - create
        - sops
      parameters:
        - in: body
          name: sop
          description: The sop to create.
          schema:
            $ref: '#/definitions/sopPost'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/sopResponse'
          examples:
            application/json:
              $ref: '../examples/sopPostResponse.yml'
        <<: *CreateType
  '/sops/{id}':
    parameters:
      - name: id
        in: path
        required: true
        description: 'The SOP to fetch, patch or delete'
        type: integer
        default: 203
    get:
      operationId: readSop
      description:
        $ref: ../descriptions/readSop.md
      parameters:
        - name: version
          in: query
          required: true
          description: The version of the sop to get
          type: integer
          default: 1
      tags:
        - read
        - sops
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/sopResponse'
          examples:
            application/json:
              $ref: ../examples/sopResponse.yml
        <<: *ReadType
    patch:
      operationId: updateSop
      description:
        $ref: ../descriptions/updateSop.md
      tags:
        - update
        - sops
      parameters:
        - in: body
          name: sop
          description: The sop to update.
          schema:
            $ref: '#/definitions/sopPatch'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/sopResponse'
          examples:
            application/json:
              $ref: ../examples/sopPatchResponse.yml
        <<: *UpdateType
    delete:
      operationId: deleteSop
      description:
        $ref: ../descriptions/deleteSop.md
      tags:
        - delete
        - sops
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ok'
        <<: *DeleteType
  /studies:
    get:
      operationId: listStudies
      description:
        $ref: ../descriptions/listStudies.md
      tags:
        - list
        - studies
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/studiesResponse'
          examples:
            application/json:
              $ref: '../examples/studiesResponse.yml'
        <<: *ListType
    post:
      operationId: createStudy
      description:
        $ref: ../descriptions/createStudy.md
      tags:
        - create
        - studies
      parameters:
        - in: body
          name: study
          description: The study to create.
          schema:
            $ref: '#/definitions/studyPost'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/studyResponse'
          examples:
            application/json:
              $ref: '../examples/studyPostResponse.yml'
        <<: *CreateType
  '/studies/{id}':
    parameters:
      - name: id
        in: path
        required: true
        description: 'The study to fetch, patch or delete'
        type: integer
        default: 138
    get:
      operationId: readStudy
      description:
        $ref: ../descriptions/readStudy.md
      tags:
        - read
        - studies
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/studyResponse'
          examples:
            application/json:
              $ref: ../examples/studyResponse.yml
        <<: *ReadType
    patch:
      operationId: updateStudy
      description:
        $ref: ../descriptions/updateStudy.md
      tags:
        - update
        - studies
      parameters:
        - in: body
          name: study
          description: The study to update.
          schema:
            $ref: '#/definitions/studyPatch'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/studyResponse'
          examples:
            application/json:
              $ref: ../examples/studyPatchResponse.yml
        <<: *UpdateType
    delete:
      operationId: deleteStudy
      description:
        $ref: ../descriptions/deleteStudy.md
      tags:
        - delete
        - studies
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ok'
        <<: *DeleteType
