# -*- coding: utf-8 -*-
"""isatools.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sr22PfEdu9zLOkjwZjMWY50NmvgwB9xj
"""

!pip install isatools

from isatools.model import *
from isatools import isatab
from isatools.isajson import ISAJSONEncoder
from isatools import isajson

import requests
import json
import string
import getpass

EXPERIMENTAL_TYPE_URL = 'http://jermontology.org/ontology/JERMOntology'
TECHNOLOGY_TYPE_URL = 'http://jermontology.org/ontology/JERMOntology'

headers = {"Content-type": "application/vnd.api+json",
           "Accept": "application/vnd.api+json",
           "Accept-Charset": "ISO-8859-1"}

def recreate_url (object_dict):
  url = base_url + '/' + object_dict['type'] + '/' + object_dict['id']
  return url

def read_seek_object (url):
  
    if type(url) is dict:
      url = recreate_url (url)
    
    if not url.endswith(".json"):
      url += ".json"
    
    r = session.get (url)
    
    json = r.json()
    
    merged_dict = {**json['data']['attributes'],
                   **json['data']['relationships'],
                   **json['data']['meta'],
                   'id' : json['data']['id']}
    
    return url, merged_dict

def try_set_attr (object, field_name, seek_dict, seek_field_name) :
  try:
    setattr(object, field_name, seek_dict['seek_field_name'])
  except KeyError:
    pass

def translate_investigation(seek_investigation_url):
  
    global base_url
    
    global object_map
    
    base_url = seek_investigation_url.split('/investigations')[0]
    
    object_map = {}
    
    actual_url, seek_investigation = read_seek_object (seek_investigation_url)
    
    if actual_url in object_map:
      return object_map [actual_url]
    
    investigation = Investigation()
    
    # @id and filename not mapped
    
    investigation.identifier = seek_investigation['id']
    investigation.title = seek_investigation['title']
    investigation.description = seek_investigation['description']
    investigation.submission_date = seek_investigation['created'].split('T')[0]
    investigation.public_release_date = investigation.submission_date
    
    # ontologySourceReferences pre-defined
    investigation.add_ontology_source_reference (name = 'experimental_type', file=EXPERIMENTAL_TYPE_URL)
    object_map [EXPERIMENTAL_TYPE_URL] = investigation.get_ontology_source_reference('experimental_type')
    investigation.add_ontology_source_reference (name = 'technology_type', file=TECHNOLOGY_TYPE_URL)
    object_map[TECHNOLOGY_TYPE_URL] = investigation.get_ontology_source_reference('technology_type')
    
    # map publications from publications
    for seek_publication_ref in seek_investigation['publications']['data']:
      publication = translate_publication (seek_publication_ref)
      investigation.publications.append(publication)
     
    # map people from people
    for seek_person_ref in seek_investigation['people']['data']:
      person = translate_person (seek_person_ref)
      investigation.contacts.append(person)
    
    # map studies from studies
    for seek_study_ref in seek_investigation['studies']['data']:
      study = translate_study (seek_study_ref)
      investigation.studies.append(study)
    
    # comments are not mapped
    
    object_map [actual_url] = investigation

    return investigation

def translate_study(seek_study_url):
  
    
    actual_url, seek_study = read_seek_object (seek_study_url)

    if actual_url in object_map:
      return object_map [actual_url]

    study = Study()
    
    # @id and filename not mapped
    
    study.identifier = seek_study['id']
    study.title = seek_study['title']
    study.description = seek_study['description']
    study.submission_date = seek_study['created'].split('T')[0]
    study.public_release_date = study.submission_date
    
    # map publications from publications
    for seek_publication_ref in seek_study['publications']['data']:
      publication = translate_publication (seek_publication_ref)
      study.publications.append(publication)
     
    for seek_person_ref in seek_study['people']['data']:
      person = translate_person (seek_person_ref)
      study.contacts.append(person)
       
    # studyDesignDescriptors not yet mapped

    # materials not yet mapped
    
    # processSequence not yet mapped
    
    # map assays from assays
    for seek_assay_ref in seek_study['assays']['data']:
      assay = translate_assay (seek_assay_ref)
      study.assays.append(assay)

    # map protocols from the sops referenced by the assays
    # must be done after mapping of assays
    for seek_assay_ref in seek_study['assays']['data']:
      u, seek_assay = read_seek_object (seek_assay_ref)
      for seek_sop_ref in seek_assay['sops']['data']:
        protocol = translate_sop (seek_sop_ref)
        study.protocols.append(protocol)
  
    # factors not yet mapped

    # characteristicCategories not yet mapped

    # unitCategories not yet mapped

    # comments are not mapped

    object_map [actual_url] = study

    return study

def translate_annotation(seek_type, ontology_url):
  source = object_map[ontology_url]
  seek_term = seek_type['uri'].split('#')[1]
  annotation = OntologyAnnotation(term=seek_term, term_source=source, term_accession=seek_type['uri'])
  return annotation

def translate_assay(seek_assay_url):
  
    actual_url, seek_assay = read_seek_object (seek_assay_url)

    if actual_url in object_map:
      return object_map [actual_url]

    assay = Assay()
     
    # @id not yet mapped
    
    assay.description = seek_assay['description']
    
    # comments are not mapped
       
    # filename not yet mapped
       
    # mao measurementType from assay_type
    if seek_assay['assay_type']['uri']:
      assay.measurement_type = translate_annotation (seek_assay['assay_type'], EXPERIMENTAL_TYPE_URL)
       
    # map technologyType from technology_type
    if seek_assay['technology_type']['uri']:
      assay.technology_type = translate_annotation (seek_assay['technology_type'], TECHNOLOGY_TYPE_URL)
       
    # technologyPlatform not yet mapped
       
    # dataFiles not yet mapped
       
    # materials not yet mapped
       
    # characteristicCategories not yet mapped
       
    # unitCategories not yet mapped
    
    # processSequence not yet mapped
       
    object_map [actual_url] = assay

    return assay

def translate_person(seek_person_url):
  actual_url, seek_person = read_seek_object (seek_person_url)
  
  if actual_url in object_map:
    return object_map [actual_url]

  person = Person()
  
  # @id not yet mapped
  
  person.last_name = seek_person['last_name']
  person.first_name = seek_person['first_name']
  # midInitials is not mapped
  # eMail is not mapped
  person.phone = seek_person.get('phone', '')
  # fax is not mapped
  # address is not mapped
  
  # affiliation is not yet mapped
  
  # roles are not yet mapped
  
  # comments are not mapped
  
  object_map [actual_url] = person
  
  print ('added ', actual_url)

  return person

def translate_publication(seek_publication_url):
  actual_url, seek_publication = read_seek_object (seek_publication_url)
  
  if actual_url in object_map:
    return object_map [actual_url]

  publication = Publication()
  
  # comments are not mapped
  
  publication.pubMedID = seek_publication.get('pubmed_id', '')
  publication.doi = seek_publication.get('doi', '')
  publication.author_list = ', '.join (seek_publication.get('authors', []))
  
  publication.title = seek_publication['title']
  # status not yet mapped
   
  object_map [actual_url] = publication

  return publication

def translate_sop(seek_sop_url):
  actual_url, seek_sop = read_seek_object (seek_sop_url)
  
  if actual_url in object_map:
    return object_map [actual_url]

  protocol = Protocol()
  
  # comments are not mapped
  
  protocol.name = seek_sop['title']
  
  # protocol_type not yet mapped
  
  protocol.description = seek_sop['description']
  
  # uri cannot be mapped
  
  protocol.version = str(seek_sop['version'])

  # parameters cannot be mapped
  
  # components not yet mapped
   
  object_map [actual_url] = protocol

  return protocol

session = requests.Session()
session.headers.update(headers)

investigation = translate_investigation('https://fairdomhub.org/investigations/162')

json_string = json.dumps(investigation,
                         cls=ISAJSONEncoder,
                         sort_keys=True,
                         indent=4,
                         separators=(',', ': '))

tab_string = isatab.dumps(investigation)

print (json_string)

my_json_report = isajson.validate(json_string)

print (my_json_report)

print (tab_string)
